openapi: 3.0.3
info:
  title: Bci-Test API
  version: 1.0.0

paths:
  /auth/login:
    post:
      tags:
        - Auth Management
      summary: do login
      operationId: do_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /user/create:
    post:
      tags:
        - User Management
      operationId: createUser
      summary: Create a new user
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError

  /user/findById/{id}:
    get:
      tags:
        - User Management
      operationId: find user by id
      summary: find user by id
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: returns one unique user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError

  /user/findAll:
    get:
      tags:
        - User Management
      operationId: find_all
      summary: find all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: retrieve all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError

  /user/updateById/{id}:
    put:
      tags:
        - User Management
      operationId: update_by_id
      summary: update user information
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '204':
          description: User was updated successfully
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError

  /user/deleteById/{id}:
    delete:
      tags:
        - User Management
      operationId: delete_by_id
      summary: delete one user
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: Users was deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError

  /user/deleteAll:
    delete:
      tags:
        - User Management
      operationId: delete_all
      summary: delete all users
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: Users was deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: InternalServerError

components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
      example:
        email: "vicente@gmail.com"
        password: "password"

    LoginResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        ceated:
          type: string
          format: date
        lastLogin:
          type: string
          format: date
        accessToken:
          type: string
        active:
          type: boolean
      required:
        - id
        - name
        - created
        - lastLogin
        - accessToken
        - active
      example:
        id: 1
        name: admin
        created: "2015-08-12T10:27:25"
        lastLogin: "2023-08-12T10:27:25"
        accessToken: "eyceijdLSDfo3"
        active: true

    UserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
      required:
        - name
        - email
        - password
      example:
        name: "vicente"
        email: "vicente@gmail.com"
        password: "password"
        phones:
          - number: "123456"
            cityCode: "57"
            countryCode: "10"

    Phone:
      type: object
      properties:
        number:
          type: string
        cityCode:
          type: string
        countryCode:
          type: string
      example:
        number: "123124"
        cityCode: "57"
        countryCode: "10"

    UserResponse:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        created:
          type: string
          format: date
        modified:
          type: string
          format: date
        lastLogin:
          type: string
          format: date
        token:
          type: string
        active:
          type: boolean
      required:
        - id
        - name
        - email
        - created
        - active
      example:
        id: 2
        name: "Vicente"
        email: "vicente@vicente.cl"
        phones:
          - nummber: "123456"
            countryCode: "34"
            cityCode: "12"
        created: "2023-08-11T17:30:32"
        modified: "2023-08-11T17:35:32"
        lastLogin: "2023-08-11T17:32:32"
        token: "ey16384jveuca"
        active: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    userId:
      name: id
      description: unique user id
      in: path
      schema:
        type: number
      required: true
